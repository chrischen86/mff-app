{"version":3,"sources":["context/createCtx.tsx","context/filterContext.tsx","context/metadataContext.tsx","filters/timeFilters.tsx","filters/filterColours.tsx","filters/storyFilters.tsx","filters/index.tsx","components/FilterSection.tsx","components/AreaBumpChart.tsx","components/BarChart.tsx","components/hooks/useRankTableData.tsx","components/hooks/useAreaBumpData.tsx","components/hooks/useBarChartData.tsx","components/GraphCard.tsx","components/hooks/useCharacterBonus.tsx","components/hooks/useCharactersMetadata.tsx","components/hooks/useFilteredData.tsx","components/hooks/useFragmentsMetadata.tsx","components/hooks/useStagesMetadata.tsx","components/RankTable.tsx","components/RankTableCard.tsx","components/SiteAppBar.tsx","components/HomePage.tsx","filters/fragmentFilters.tsx","theme.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createCtx","reducer","initialState","ctx","React","createContext","state","dispatch","props","useReducer","Provider","value","action","type","filters","undefined","find","f","id","filterId","map","enabled","filter","s","Error","FilterProvider","FilterContext","stages","characters","fragments","data","distinctDates","d","i","arr","findIndex","t","date","Date","sort","a","b","getTime","currentMonth","length","toISOString","stories","MetadataProvider","MetadataContext","timeFilters","label","canDelete","predicate","term","metadata","theDate","current","getMonth","filterColourMap","storyFilters","stageId","colour","allFilters","useStyles","makeStyles","theme","toolbar","backgroundColor","display","flexWrap","padding","spacing","transition","transitions","create","easing","easeInOut","duration","short","position","toolbarHidden","paddingLeft","minHeight","easeIn","chip","margin","chipHidden","FilterSection","visible","useState","isVisible","setIsVisible","useContext","classes","Toolbar","className","clsx","IconButton","onClick","Chip","onDelete","chipId","forEach","handleClick","color","size","style","AreaBumpChart","areaBumpData","top","right","bottom","left","colors","scheme","blendMode","startLabel","axisTop","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","format","moment","axisBottom","getColour","bar","BarChart","memo","keys","flatMap","Object","Array","from","Set","k","getKeys","indexBy","axisLeft","e","Math","floor","valueScale","labelSkipWidth","labelSkipHeight","labelTextColor","useRankTableData","rankData","setRankData","useEffect","reduce","acc","val","currentCount","get","characterId","set","Map","key","characterName","c","name","count","prepare","useAreaBumpData","setAreaBumpData","top10","slice","areaData","uniqueDates","usageData","x","y","dataPoint","updatedDataPoint","story","currentCharacterItem","barCountItem","storyCharacterCount","useBarChartData","barData","setBarData","preparedData","graphContainer","height","width","justifyContent","alignItems","graphSkeleteon","transform","GraphCard","isLoading","metadataContext","filterContext","showTreemap","Paper","Skeleton","useCharacterBonus","useQuery","fetch","res","json","useCharactersMetadata","useFilteredData","filteredData","setFilteredData","enabledFilters","fragmentFilters","startsWith","enabledFragmentFilters","some","filterGroups","every","fg","ef","filterData","useFragmentMetadata","useStagesMetadata","table","minWidth","tableContainer","RankTable","rankedData","TableContainer","component","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","row","scope","card","cardContent","paddingBottom","float","marginRight","contentContainer","RankTableCard","Card","CardHeader","title","animation","marginBottom","CardContent","_val","index","Fragment","root","flexGrow","menuButton","SiteAppBar","AppBar","Typography","variant","target","href","createStyles","HomePage","filterDispatch","stageMetadata","isStageMetadataLoading","characterMetadata","isCharacterMetadataLoading","fragmentMetadata","isFragmentMetadataLoading","isDataLoading","fragment","stageIds","includes","Grid","container","item","lg","xs","md","createMuiTheme","palette","primary","main","purple","secondary","green","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","App","QueryClientProvider","client","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a53f23d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function createCtx<StateType, ActionType>(\n  reducer: React.Reducer<StateType, ActionType>,\n  initialState: StateType\n) {\n  const defaultDispatch: React.Dispatch<ActionType> = () => initialState; // we never actually use this\n  const ctx = React.createContext({\n    state: initialState,\n    dispatch: defaultDispatch, // just to mock out the dispatch type and make it not optioanl\n  });\n\n  function Provider(props: React.PropsWithChildren<{}>) {\n    const [state, dispatch] = React.useReducer<\n      React.Reducer<StateType, ActionType>\n    >(reducer, initialState);\n    return <ctx.Provider value={{ state, dispatch }} {...props} />;\n  }\n  return [ctx, Provider] as const;\n}\n","import createCtx from './createCtx';\nimport { Filter } from '../filters/types';\n\nconst initialState: { filters: Filter[] } = {\n  filters: [],\n};\ntype FilterState = typeof initialState;\ntype Action =\n  | { type: 'add'; filters: Filter[] }\n  | { type: 'remove'; filters: Filter[] }\n  | { type: 'enable'; filterId: string }\n  | { type: 'disable'; filterId: string };\n\nconst reducer = (state: FilterState, action: Action): FilterState => {\n  switch (action.type) {\n    case 'add':\n      return {\n        ...state,\n        filters: action.filters,\n      };\n    case 'enable':\n    case 'disable': {\n      const filter = state.filters.find((f) => f.id === action.filterId);\n      if (filter === undefined) {\n        return state;\n      }\n\n      return {\n        ...state,\n        filters: state.filters.map((f) => {\n          return f.id === action.filterId\n            ? {\n                ...f,\n                enabled: action.type === 'disable' ? false : true,\n              }\n            : f;\n        }),\n      };\n    }\n    case 'remove':\n      return {\n        ...state,\n        filters: [\n          ...state.filters.filter((f) =>\n            action.filters.find((s) => s.id === f.id)\n          ),\n        ],\n      };\n    default:\n      throw new Error(`Uknown action type provided`);\n  }\n};\n\nconst [ctx, FilterProvider] = createCtx(reducer, initialState);\nexport const FilterContext = ctx;\n\nexport default FilterProvider;\n","import {\n  Character,\n  Stage,\n  SelectedCharacterBonus,\n  Metadata,\n  StoryFragment,\n} from '../types';\nimport createCtx from './createCtx';\n\nconst initialState: Metadata = {\n  stages: [],\n  characters: [],\n  stories: [],\n  fragments: [],\n  currentMonth: undefined,\n};\n\ntype MetadataState = typeof initialState;\ntype Action =\n  | { type: 'setStages'; stages: Stage[] }\n  | { type: 'setCharacters'; characters: Character[] }\n  | { type: 'setFragments'; fragments: StoryFragment[] }\n  | { type: 'calculateLastMonth'; data: SelectedCharacterBonus[] };\n\nconst reducer = (state: MetadataState, action: Action): MetadataState => {\n  switch (action.type) {\n    case 'setStages':\n      return {\n        ...state,\n        stages: action.stages,\n      };\n    case 'setCharacters':\n      return {\n        ...state,\n        characters: action.characters,\n      };\n    case 'setFragments':\n      return {\n        ...state,\n        fragments: action.fragments,\n      };\n    case 'calculateLastMonth': {\n      if (action.data === undefined) {\n        return state;\n      }\n      const distinctDates = action.data\n        .filter((d, i, arr) => arr.findIndex((t) => t.date === d.date) === i)\n        .map((d) => new Date(d.date))\n        .sort((a, b) => {\n          return a.getTime() - b.getTime();\n        });\n\n      return {\n        ...state,\n        currentMonth: distinctDates[distinctDates.length - 1].toISOString(),\n      };\n    }\n\n    default:\n      throw new Error(`Uknown action type provided`);\n  }\n};\n\nconst [ctx, MetadataProvider] = createCtx(reducer, initialState);\nexport const MetadataContext = ctx;\n\nexport default MetadataProvider;\n","import { Metadata, SelectedCharacterBonus } from '../types';\nimport { Filter } from './types';\n\nconst currentMonthFilter: Filter = {\n  id: 'currentMonth',\n  label: 'Current Month',\n  enabled: true,\n  canDelete: false,\n  predicate: (term: SelectedCharacterBonus, metadata: Metadata) => {\n    const theDate = new Date(term.date);\n    const current =\n      metadata.currentMonth === undefined\n        ? new Date()\n        : new Date(metadata.currentMonth);\n\n    return theDate.getMonth() === current.getMonth();\n  },\n};\nexport { currentMonthFilter };\n\nconst allTimeFilter: Filter = {\n  id: 'allTime',\n  label: 'All Time',\n  enabled: false,\n  canDelete: false,\n  predicate: (term: SelectedCharacterBonus) => {\n    return true;\n  },\n};\nexport { allTimeFilter };\nconst timeFilters = [currentMonthFilter, allTimeFilter];\nexport default timeFilters;\n","const futureColour = '#23a5d7';\nconst warColour = '#6d1895';\nconst shieldColour = '#3b7d57';\nconst dimensionColour = '#bf0001';\n\nconst filterColourMap: { [key: string]: string } = {\n  'Dimensional Clash': dimensionColour,\n  'The True SHIELD': shieldColour,\n  'The All War': warColour,\n  'The Future Ends Here': futureColour,\n};\n\nexport default filterColourMap;\n","import { SelectedCharacterBonus } from '../types';\nimport filterColourMap from './filterColours';\nimport { Filter } from './types';\n\nconst dimensionalClashdFilter: Filter = {\n  id: 'dimensionalClash',\n  label: 'Dimensional Clash',\n  enabled: true,\n  canDelete: true,\n  predicate: (term: SelectedCharacterBonus) => {\n    return term.stageId <= 20;\n  },\n  colour: filterColourMap['Dimensional Clash'],\n};\nexport { dimensionalClashdFilter };\n\nconst trueShieldFilter: Filter = {\n  id: 'trueShield',\n  label: 'The True SHIELD',\n  enabled: true,\n  canDelete: true,\n  predicate: (term: SelectedCharacterBonus) => {\n    return term.stageId >= 21 && term.stageId <= 24;\n  },\n  colour: filterColourMap['The True SHIELD'],\n};\nexport { trueShieldFilter };\n\nconst allWarFilter: Filter = {\n  id: 'allWar',\n  label: 'The All War',\n  enabled: true,\n  canDelete: true,\n  predicate: (term: SelectedCharacterBonus) => {\n    return term.stageId >= 25 && term.stageId <= 28;\n  },\n  colour: filterColourMap['The All War'],\n};\nexport { allWarFilter };\n\nconst futureEndsHereFilter: Filter = {\n  id: 'futureEndsHere',\n  label: 'The Future Ends Here',\n  enabled: true,\n  canDelete: true,\n  predicate: (term: SelectedCharacterBonus) => {\n    return term.stageId >= 29;\n  },\n  colour: filterColourMap['The Future Ends Here'],\n};\nexport { futureEndsHereFilter };\n\nconst storyFilters = [\n  dimensionalClashdFilter,\n  trueShieldFilter,\n  allWarFilter,\n  futureEndsHereFilter,\n];\nexport default storyFilters;\n","import timeFilters from './timeFilters';\nimport storyFilters from './storyFilters';\nimport { createFragmentFilters } from './fragmentFilters';\n\nexport { createFragmentFilters };\n\nconst allFilters = [...timeFilters, ...storyFilters];\nexport default allFilters;\n","import { Toolbar, IconButton, Chip } from '@material-ui/core';\nimport React from 'react';\nimport { Filter } from '../filters/types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport FilterIcon from '@material-ui/icons/FilterList';\nimport { FilterContext } from '../context/filterContext';\nimport timeFilters from '../filters/timeFilters';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    backgroundColor: '#f5f5f5',\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: theme.spacing(0.5),\n    transition: theme.transitions.create(\n      ['padding', 'min-height', 'background-color'],\n      {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.short,\n      }\n    ),\n    position: 'sticky',\n  },\n  toolbarHidden: {\n    backgroundColor: 'inherit',\n    padding: 0,\n    paddingLeft: theme.spacing(0.5),\n    minHeight: 0,\n    transition: theme.transitions.create(\n      ['padding', 'min-height', 'background-color'],\n      {\n        easing: theme.transitions.easing.easeIn,\n        duration: theme.transitions.duration.short,\n      }\n    ),\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n  chipHidden: {\n    display: 'none',\n  },\n}));\n\nconst FilterSection = ({ visible = false }: { visible?: boolean }) => {\n  const [isVisible, setIsVisible] = React.useState(visible);\n  const { state, dispatch } = React.useContext(FilterContext);\n  const classes = useStyles();\n\n  const handleDelete = (chipId: string) => {\n    dispatch({\n      type: 'disable',\n      filterId: chipId,\n    });\n  };\n\n  const handleClick = (filter: Filter) => {\n    if (timeFilters.find((f) => f.id === filter.id)) {\n      const others = timeFilters.filter((f) => f.id !== filter.id);\n      others.forEach((f) => {\n        dispatch({\n          type: filter.enabled ? 'enable' : 'disable',\n          filterId: f.id,\n        });\n      });\n    }\n    dispatch({\n      type: filter.enabled ? 'disable' : 'enable',\n      filterId: filter.id,\n    });\n  };\n\n  if (!isVisible && state.filters.length <= 0) {\n    return null;\n  }\n\n  return (\n    <Toolbar\n      className={clsx(classes.toolbar, !isVisible && classes.toolbarHidden)}\n    >\n      <IconButton onClick={() => setIsVisible(!isVisible)}>\n        <FilterIcon />\n      </IconButton>\n      {state.filters?.map((filter) => {\n        return (\n          <Chip\n            key={filter.id}\n            label={filter.label}\n            className={clsx(\n              classes.chip,\n              !isVisible && !filter.enabled && classes.chipHidden\n            )}\n            onDelete={\n              !isVisible && filter.canDelete\n                ? () => handleDelete(filter.id)\n                : undefined\n            }\n            onClick={isVisible ? () => handleClick(filter) : undefined}\n            color={filter.enabled ? 'primary' : undefined}\n            size={isVisible ? 'medium' : 'small'}\n            style={{\n              backgroundColor: filter.enabled ? filter.colour : undefined,\n            }}\n          />\n        );\n      })}\n    </Toolbar>\n  );\n};\n\nexport default FilterSection;\n","import React from 'react';\nimport { AreaBumpInputSerie, ResponsiveAreaBump } from '@nivo/bump';\nimport moment from 'moment';\n\nconst AreaBumpChart = ({\n  areaBumpData,\n}: {\n  areaBumpData: AreaBumpInputSerie[];\n}) => {\n  return (\n    <ResponsiveAreaBump\n      data={areaBumpData}\n      margin={{ top: 40, right: 100, bottom: 40, left: 100 }}\n      spacing={8}\n      colors={{ scheme: 'nivo' }}\n      blendMode=\"multiply\"\n      startLabel=\"id\"\n      axisTop={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Top 10 Ranking Over Time',\n        legendPosition: 'middle',\n        legendOffset: -28,\n        format: function (value: string) {\n          return moment(value).format('MMM YYYY');\n        },\n      }}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: '',\n        legendPosition: 'middle',\n        legendOffset: 32,\n        format: function (value: string) {\n          return moment(value).format('MMM YYYY');\n        },\n      }}\n    />\n  );\n};\n\nexport default AreaBumpChart;\n","import { ResponsiveBar } from '@nivo/bar';\nimport React from 'react';\nimport { BarItem } from './types';\n\nimport filterColourMap from '../filters/filterColours';\n\nconst getKeys = (data: BarItem[]) => {\n  const keys = data.flatMap((d) => Object.keys(d));\n  return Array.from(new Set(keys)).filter((k) => k !== 'characterName');\n};\n\nconst getColour = (bar: any) => {\n  const { id } = bar;\n  return filterColourMap[id];\n};\n\nconst BarChart = React.memo(({ data }: { data: BarItem[] }) => {\n  const keys = getKeys(data);\n  return (\n    <ResponsiveBar\n      data={data}\n      indexBy={'characterName'}\n      keys={keys}\n      margin={{ top: 10, right: 10, bottom: 80, left: 30 }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        format: (e) => {\n          if (typeof e === 'number') {\n            return Math.floor(e) === e ? e : '';\n          }\n          return '';\n        },\n      }}\n      axisBottom={{\n        tickRotation: -45,\n        tickPadding: 10,\n      }}\n      valueScale={{ type: 'linear' }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor=\"white\"\n      colors={getColour}\n    />\n  );\n});\n\nexport default BarChart;\n","import React from 'react';\nimport { Metadata, SelectedCharacterBonus } from '../../types';\nimport { BonusesCount } from '../types';\n\nconst prepare = (\n  data: SelectedCharacterBonus[],\n  metadata?: Metadata\n): BonusesCount[] => {\n  const rankData = Array.from(\n    data.reduce((acc, val) => {\n      const currentCount = acc.get(val.characterId);\n      acc.set(val.characterId, currentCount ? currentCount + 1 : 1);\n      return acc;\n    }, new Map<string, number>()),\n    ([key, value]) => {\n      const characterName =\n        metadata?.characters.find((c) => c.id === key)?.name || key;\n      return {\n        characterName,\n        count: value,\n      };\n    }\n  ).sort((a, b) => b.count - a.count);\n\n  return rankData;\n};\n\nconst useRankTableData = (\n  data: SelectedCharacterBonus[],\n  metadata?: Metadata\n): BonusesCount[] => {\n  const [rankData, setRankData] = React.useState<BonusesCount[]>([]);\n\n  React.useEffect(() => {\n    setRankData(prepare(data, metadata));\n  }, [data, metadata]);\n  return rankData;\n};\n\nexport default useRankTableData;\n","import { SelectedCharacterBonus } from '../../types';\nimport { AreaBumpInputSerie } from '@nivo/bump';\nimport useRankTableData from './useRankTableData';\nimport React from 'react';\n\nconst prepare = (data: SelectedCharacterBonus[]): AreaBumpInputSerie[] => {\n  const uniqueDates = Array.from(new Set(data.map((d) => d.date)));\n  const areaBumpData = Array.from(\n    data.reduce((acc, val) => {\n      const usageData = acc.get(val.characterId);\n\n      if (usageData === undefined) {\n        acc.set(val.characterId, [\n          ...uniqueDates.map((d) => ({\n            x: d,\n            y: d === val.date ? 1 : 0,\n          })),\n        ]);\n      } else {\n        const dataPoint = usageData.find((d) => d.x === val.date);\n        if (dataPoint === undefined) {\n          acc.set(val.characterId, [\n            ...usageData.filter((d) => d.x !== val.date),\n            { x: val.date, y: 1 },\n          ]);\n        } else {\n          const updatedDataPoint = {\n            ...dataPoint,\n            y: dataPoint.y + 1,\n          };\n          acc.set(\n            val.characterId,\n            usageData.map((d) => (d.x === val.date ? updatedDataPoint : d))\n          );\n        }\n      }\n\n      return acc;\n    }, new Map<string, { x: string; y: number }[]>()),\n    ([key, value]) => ({ id: key, data: value })\n  );\n\n  return areaBumpData;\n};\n\nconst useAreaBumpData = (\n  data: SelectedCharacterBonus[]\n): AreaBumpInputSerie[] => {\n  const [areaBumpData, setAreaBumpData] = React.useState<AreaBumpInputSerie[]>(\n    []\n  );\n  const rankData = useRankTableData(data);\n\n  React.useEffect(() => {\n    const top10 = rankData.slice(0, 10);\n    const areaData = prepare(data);\n    setAreaBumpData(\n      areaData.filter((d) => top10.find((t) => t.characterName === d.id))\n    );\n  }, [data, rankData]);\n  return areaBumpData;\n};\n\nexport default useAreaBumpData;\n","import React from 'react';\nimport { Metadata, SelectedCharacterBonus, Stage } from '../../types';\nimport { BarItem } from '../types';\n\nconst getKeys = (data: Stage[]) => {\n  const keys = data.flatMap((d) => d.story);\n  return Array.from(new Set(keys));\n};\n\ninterface BarCountItem {\n  [key: string]: number;\n}\n\nconst prepare = (\n  data: SelectedCharacterBonus[],\n  metadata: Metadata\n): BarItem[] => {\n  const keys = getKeys(metadata.stages);\n  const rankData = Array.from(\n    data.reduce((acc, val) => {\n      const story =\n        metadata.stages.find((s) => s.id === val.stageId)?.story ||\n        `Stage ${val.stageId}`;\n\n      const characterName =\n        metadata.characters.find((c) => c.id === val.characterId)?.name ||\n        val.characterId;\n\n      const currentCharacterItem = acc.get(characterName);\n      if (currentCharacterItem === undefined) {\n        const barCountItem = keys.reduce((acc, current) => {\n          return {\n            ...acc,\n            [current]: current === story ? 1 : 0,\n          };\n        }, {});\n        //acc.set(characterName, { [story]: 1 });\n        acc.set(characterName, barCountItem);\n      } else {\n        const storyCharacterCount = currentCharacterItem[story] || 0;\n\n        acc.set(characterName, {\n          ...currentCharacterItem,\n          [story]: storyCharacterCount + 1,\n        });\n      }\n\n      return acc;\n    }, new Map<string, BarCountItem>()),\n    ([key, value]) => ({ characterName: key, ...value })\n  );\n\n  return rankData;\n};\n\nconst useBarChartData = (\n  data: SelectedCharacterBonus[],\n  metadata: Metadata\n): BarItem[] => {\n  const [barData, setBarData] = React.useState<BarItem[]>([]);\n\n  React.useEffect(() => {\n    if (data !== undefined) {\n      const preparedData = prepare(data, metadata);\n      setBarData(preparedData);\n    }\n  }, [data, metadata]);\n\n  return barData;\n};\n\nexport default useBarChartData;\n","import { Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React from 'react';\nimport { FilterContext } from '../context/filterContext';\nimport { MetadataContext } from '../context/metadataContext';\nimport { SelectedCharacterBonus } from '../types';\nimport AreaBumpChart from './AreaBumpChart';\nimport BarChart from './BarChart';\nimport useAreaBumpData from './hooks/useAreaBumpData';\nimport useBarChartData from './hooks/useBarChartData';\n\nconst useStyles = makeStyles({\n  graphContainer: {\n    height: '75vh',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  graphSkeleteon: {\n    transform: 'scale(1,1)',\n    height: '90%',\n    width: '95%',\n  },\n});\n\nconst GraphCard = ({\n  data,\n  isLoading = false,\n}: {\n  data: SelectedCharacterBonus[];\n  isLoading?: boolean;\n}) => {\n  const { state: metadataContext } = React.useContext(MetadataContext);\n  const { state: filterContext } = React.useContext(FilterContext);\n  const areaBumpData = useAreaBumpData(data);\n  const barData = useBarChartData(data, metadataContext);\n  const classes = useStyles();\n\n  const showTreemap =\n    filterContext.filters.filter((f) => f.id === 'currentMonth' && f.enabled)\n      .length >= 1;\n\n  return (\n    <Paper className={classes.graphContainer}>\n      {isLoading && <Skeleton className={classes.graphSkeleteon} />}\n      {!isLoading && !showTreemap && (\n        <AreaBumpChart areaBumpData={areaBumpData} />\n      )}\n      {!isLoading && showTreemap && <BarChart data={barData} />}\n    </Paper>\n  );\n};\n\nexport default GraphCard;\n","import { useQuery } from 'react-query';\n\nconst useCharacterBonus = () => {\n  return useQuery('characterBonus', async () => {\n    const res = await fetch(\n      'https://chrischen86.github.io/mff-data/selectedcharacterbonus.json'\n    );\n    return res.json();\n  });\n};\n\nexport default useCharacterBonus;\n","import { useQuery } from 'react-query';\n\nconst useCharactersMetadata = () => {\n  return useQuery('characters', async () => {\n    const res = await fetch(\n      'https://chrischen86.github.io/mff-data/characters.json'\n    );\n    return res.json();\n  });\n};\n\nexport default useCharactersMetadata;\n","import storyFilters from '../../filters/storyFilters';\nimport timeFilters from '../../filters/timeFilters';\nimport { Filter } from '../../filters/types';\nimport { Metadata, SelectedCharacterBonus } from '../../types';\nimport React from 'react';\nimport { MetadataContext } from '../../context/metadataContext';\n\nconst filterData = (\n  data: SelectedCharacterBonus[],\n  filters: Filter[],\n  metadata: Metadata\n): SelectedCharacterBonus[] => {\n  const enabledFilters = filters.filter((f) => f.enabled);\n  const fragmentFilters = filters.filter((f) => f.id.startsWith('fragment'));\n\n  const enabledFragmentFilters = fragmentFilters.some((f) => f.enabled);\n\n  let filterGroups = [timeFilters, storyFilters];\n  if (enabledFragmentFilters) {\n    filterGroups = [...filterGroups, fragmentFilters];\n  }\n  const filteredData = data.filter((d) =>\n    filterGroups.every((fg) =>\n      fg\n        .filter((f) => enabledFilters?.find((ef) => ef.id === f.id))\n        .some((f) => f.predicate(d, metadata))\n    )\n  );\n\n  return filteredData;\n};\n\nconst useFilteredData = (\n  data?: SelectedCharacterBonus[],\n  filters?: Filter[]\n): SelectedCharacterBonus[] => {\n  const { state: metadata } = React.useContext(MetadataContext);\n  const [filteredData, setFilteredData] = React.useState<\n    SelectedCharacterBonus[]\n  >([]);\n\n  React.useEffect(() => {\n    if (data === undefined) {\n      setFilteredData([]);\n    } else if (filters === undefined || filters.length <= 0) {\n      setFilteredData(data);\n    } else {\n      setFilteredData(filterData(data, filters, metadata));\n    }\n  }, [data, filters, metadata]);\n\n  return filteredData;\n};\n\nexport default useFilteredData;\n","import { useQuery } from 'react-query';\n\nconst useFragmentMetadata = () => {\n  return useQuery('fragments', async () => {\n    const res = await fetch(\n      'https://chrischen86.github.io/mff-data/fragments.json'\n    );\n    return res.json();\n  });\n};\n\nexport default useFragmentMetadata;\n","import { useQuery } from 'react-query';\n\nconst useStagesMetadata = () => {\n  return useQuery('stages', async () => {\n    const res = await fetch(\n      'https://chrischen86.github.io/mff-data/stages.json'\n    );\n    return res.json();\n  });\n};\n\nexport default useStagesMetadata;\n","import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { BonusesCount } from './types';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 250,\n  },\n  tableContainer: {\n    height: '65vh',\n    width: '100%',\n  },\n});\n\nconst RankTable = ({ rankedData }: { rankedData: BonusesCount[] }) => {\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper} className={classes.tableContainer}>\n      <Table className={classes.table} stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell>Character</TableCell>\n            <TableCell align=\"right\"># of stages</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rankedData.map((row) => (\n            <TableRow key={row.characterName}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.characterName}\n              </TableCell>\n              <TableCell align=\"right\">{row.count}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default RankTable;\n","import { Card, CardContent, CardHeader } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport React from 'react';\nimport { MetadataContext } from '../context/metadataContext';\nimport { SelectedCharacterBonus } from '../types';\nimport useRankTableData from './hooks/useRankTableData';\nimport RankTable from './RankTable';\n\nconst useStyles = makeStyles({\n  card: {\n    //height: '65vh',\n  },\n  cardContent: {\n    padding: 0,\n    '&:last-child': {\n      paddingBottom: 0,\n    },\n  },\n  left: {\n    float: 'left',\n  },\n  right: {\n    float: 'right',\n    marginRight: '1em',\n  },\n  contentContainer: {\n    paddingLeft: '1em',\n  },\n});\n\nconst RankTableCard = ({\n  data,\n  isLoading = false,\n}: {\n  data: SelectedCharacterBonus[];\n  isLoading?: boolean;\n}) => {\n  const { state } = React.useContext(MetadataContext);\n  const rankedData = useRankTableData(data, state);\n  const classes = useStyles();\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardHeader\n          title={\n            isLoading ? (\n              <Skeleton\n                animation=\"wave\"\n                height={30}\n                width=\"80%\"\n                style={{ marginBottom: 6 }}\n              />\n            ) : (\n              'Story Mode Rank'\n            )\n          }\n        />\n        <CardContent className={classes.cardContent}>\n          {isLoading && (\n            <div className={classes.contentContainer}>\n              {[...Array(20)].map((_val, index) => (\n                <React.Fragment key={index}>\n                  <Skeleton\n                    animation=\"wave\"\n                    height={10}\n                    style={{ marginBottom: 6 }}\n                    width=\"50%\"\n                    className={classes.left}\n                  ></Skeleton>\n                  <Skeleton\n                    animation=\"wave\"\n                    height={10}\n                    width=\"10%\"\n                    className={classes.right}\n                  />\n                  <br />\n                </React.Fragment>\n              ))}\n            </div>\n          )}\n          {!isLoading && <RankTable rankedData={rankedData} />}\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default RankTableCard;\n","import { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst SiteAppBar = () => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}></Typography>\n        <IconButton\n          color=\"inherit\"\n          target=\"_blank\"\n          href={'https://github.com/chrischen86/mff-app'}\n        >\n          <GitHubIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default SiteAppBar;\n","import { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { FilterContext } from '../context/filterContext';\nimport { MetadataContext } from '../context/metadataContext';\n//import data from './__mocks__/data.json';\nimport filters, { createFragmentFilters } from '../filters';\nimport FilterSection from './FilterSection';\nimport GraphCard from './GraphCard';\nimport useCharacterBonus from './hooks/useCharacterBonus';\nimport useCharactersMetadata from './hooks/useCharactersMetadata';\nimport useFilteredData from './hooks/useFilteredData';\nimport useFragmentMetadata from './hooks/useFragmentsMetadata';\nimport useStagesMetadata from './hooks/useStagesMetadata';\nimport RankTableCard from './RankTableCard';\nimport SiteAppBar from './SiteAppBar';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: '1em',\n    },\n  })\n);\n\nconst HomePage = () => {\n  //Contexts\n  const { dispatch } = React.useContext(MetadataContext);\n  const { dispatch: filterDispatch, state: filterContext } =\n    React.useContext(FilterContext);\n\n  //Fetch data\n  const { data: stageMetadata, isLoading: isStageMetadataLoading } =\n    useStagesMetadata();\n  const { data: characterMetadata, isLoading: isCharacterMetadataLoading } =\n    useCharactersMetadata();\n  const { data: fragmentMetadata, isLoading: isFragmentMetadataLoading } =\n    useFragmentMetadata();\n  const { data, isLoading: isDataLoading } = useCharacterBonus();\n\n  const filteredData = useFilteredData(data, filterContext.filters);\n  const classes = useStyles();\n\n  React.useEffect(() => {\n    dispatch({ type: 'calculateLastMonth', data });\n  }, [dispatch, data]);\n\n  React.useEffect(() => {\n    if (!isStageMetadataLoading) {\n      dispatch({ type: 'setStages', stages: stageMetadata });\n    }\n\n    if (!isCharacterMetadataLoading) {\n      dispatch({ type: 'setCharacters', characters: characterMetadata });\n    }\n\n    if (!isFragmentMetadataLoading && fragmentMetadata) {\n      dispatch({ type: 'setFragments', fragments: fragmentMetadata });\n    }\n  }, [\n    dispatch,\n    characterMetadata,\n    isCharacterMetadataLoading,\n    isStageMetadataLoading,\n    isFragmentMetadataLoading,\n    stageMetadata,\n    fragmentMetadata,\n  ]);\n\n  React.useEffect(() => {\n    const fragmentFilters = createFragmentFilters(fragmentMetadata || []);\n\n    filterDispatch({\n      type: 'add',\n      filters: [...filters, ...fragmentFilters],\n    });\n  }, [filterDispatch, fragmentMetadata]);\n\n  const isLoading =\n    isStageMetadataLoading &&\n    isCharacterMetadataLoading &&\n    isFragmentMetadataLoading &&\n    isDataLoading;\n\n  return (\n    <>\n      <SiteAppBar />\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item lg={12}>\n            <FilterSection />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <RankTableCard data={filteredData} isLoading={isLoading} />\n          </Grid>\n          <Grid item xs={12} md={9}>\n            <GraphCard data={filteredData} isLoading={isLoading} />\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default HomePage;\n","import { SelectedCharacterBonus, StoryFragment } from '../types';\nimport filterColourMap from './filterColours';\nimport { Filter } from './types';\n\nconst createFragmentFilters = (fragments: StoryFragment[]): Filter[] => {\n  return fragments\n    .sort((a, b) => a.id - b.id)\n    .map((f) => {\n      const colour = filterColourMap[f.story];\n      return {\n        id: `fragmentFilter${f.id}`,\n        label: `${f.story} #${f.fragment}`,\n        enabled: false,\n        canDelete: true,\n        predicate: (term: SelectedCharacterBonus, data?: any) => {\n          return f.stageIds.includes(term.stageId);\n        },\n        colour,\n      };\n    });\n};\n\nexport { createFragmentFilters };\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/deepPurple';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport HomePage from './components/HomePage';\nimport FilterProvider from './context/filterContext';\nimport MetadataProvider from './context/metadataContext';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <>\n      <QueryClientProvider client={queryClient}>\n        <MetadataProvider>\n          <FilterProvider>\n            <ThemeProvider theme={theme}>\n              <HomePage />\n            </ThemeProvider>\n          </FilterProvider>\n        </MetadataProvider>\n      </QueryClientProvider>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}